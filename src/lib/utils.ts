import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"
import type { Prompt } from "@/types";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

function escapeJsString(str: string | undefined | null): string {
  if (str === undefined || str === null) {
    return '';
  }
  return String(str)
    .replace(/\\/g, '\\\\') // Must be first
    .replace(/'/g, "\\'")
    .replace(/\n/g, '\\n')
    .replace(/\r/g, '\\r')
    .replace(/\t/g, '\\t')
    .replace(/\b/g, '\\b')
    .replace(/\f/g, '\\f');
}

function objectToJsString(prompt: Prompt): string {
  const id = `id:      '${escapeJsString(prompt.id)}'`;
  const type = `type:    '${escapeJsString(prompt.type)}'`;
  const title = `title:   '${escapeJsString(prompt.title)}'`;
  const content = `content: \`${escapeJsString(prompt.content).replace(/`/g, '\\`').replace(/\$\{/g, '\\${')}\``;

  return `{
    ${id},
    ${type},
    ${title},
    ${content}
}`;
}

export function generateTampermonkeyScript(prompts: Prompt[]): string {
  const promptsArrayString = prompts.length > 0
    ? prompts.map(p => `        ${objectToJsString(p).replace(/\n/g, '\n        ')}`).join(',\n')
    : '        // No prompts defined. Add some in Prompt Amplifier!';

  const scriptVersion = new Date().toISOString().slice(0, 10).replace(/-/g, '.');
  const lastUpdated = new Date().toLocaleString();

  const scriptContent = `
// ==UserScript==
// @name         Prompt Amplifier Prompts
// @namespace    http://tampermonkey.net/
// @version      ${scriptVersion}
// @description  Custom prompts managed by Prompt Amplifier. Paste this into your Tampermonkey script.
// @author       Prompt Amplifier User
// @match        *://*/*
// @grant        GM_setValue
// @grant        GM_getValue
// @grant        GM_registerMenuCommand
// @grant        GM_xmlhttpRequest
// @grant        GM_addStyle
// ==/UserScript==

(function() {
    'use strict';

    //  ===== PROMPT AMPLIFIER DATA - START =====
    //  Last updated: ${lastUpdated}
    //  This block is automatically generated by Prompt Amplifier.
    //  You can edit your prompts in Prompt Amplifier and then
    //  copy this entire script block again to update them.
    //
    //  To use these prompts in your script:
    //  1. Access them via the 'PROMPT_AMPLIFIER_DATA.getPrompts()' method.
    //  2. Example: console.log(PROMPT_AMPLIFIER_DATA.getPrompts()[0].title);
    //
    //  To persist changes made by your script (if any):
    //  - Use PROMPT_AMPLIFIER_DATA.savePrompts(updatedPromptsArray);
    //
    //  If you manually edit prompts here, Prompt Amplifier won't see those changes.
    //  Use the "Reset Prompts (Prompt Amplifier)" menu command to revert to these initial values.

    const PROMPT_AMPLIFIER_DATA = {
        initialPrompts: [
${promptsArrayString}
        ],
        
        // Utility to get current prompts, preferring saved over initial
        getPrompts: function() {
            // Use a versioned key to avoid conflicts with older stored data
            return GM_getValue('promptAmplifierPrompts_v1', this.initialPrompts);
        },

        // Utility to save prompts
        savePrompts: function(currentPrompts) {
            GM_setValue('promptAmplifierPrompts_v1', currentPrompts);
            console.log('[Prompt Amplifier] Prompts saved.');
        },

        // Utility to reset prompts to the ones defined here
        resetPrompts: function() {
            GM_setValue('promptAmplifierPrompts_v1', this.initialPrompts);
            console.log('[Prompt Amplifier] Prompts reset to initial values from script.');
            alert('Prompts have been reset to the values embedded in this Tampermonkey script.');
            // Consider location.reload(); if your script applies prompts on load.
        }
    };

    // Expose PROMPT_AMPLIFIER_DATA globally (within the userscript's scope) if needed, or use it directly.
    // For example, to make it available on the window object (use with caution):
    // if (typeof unsafeWindow !== 'undefined') {
    //   unsafeWindow.PROMPT_AMPLIFIER_DATA = PROMPT_AMPLIFIER_DATA;
    // } else {
    //   window.PROMPT_AMPLIFIER_DATA = PROMPT_AMPLIFIER_DATA;
    // }


    console.log('[Prompt Amplifier] Script loaded. Access prompts via PROMPT_AMPLIFIER_DATA.getPrompts()');
    
    // Register a menu command to reset prompts
    GM_registerMenuCommand("Reset Prompts (Prompt Amplifier)", PROMPT_AMPLIFIER_DATA.resetPrompts.bind(PROMPT_AMPLIFIER_DATA));

    // You can now use PROMPT_AMPLIFIER_DATA.getPrompts() in your Tampermonkey script logic.
    // For example:
    // const myPrompts = PROMPT_AMPLIFIER_DATA.getPrompts();
    // if (myPrompts.length > 0) {
    //     console.log("First prompt title:", myPrompts[0].title);
    // }

    //  ===== PROMPT AMPLIFIER DATA - END =====


    //  >>> YOUR TAMPERMONKEY SCRIPT LOGIC GOES BELOW OR AROUND THIS BLOCK <<<
    //  Integrate the PROMPT_AMPLIFIER_DATA object into your script as needed.

})();
`;
  return scriptContent.trim();
}


export function copyToClipboard(text: string, successMessage: string, failureMessage: string, toastFn: (options: any) => void) {
  navigator.clipboard.writeText(text).then(() => {
    toastFn({
      title: "Copied!",
      description: successMessage,
      duration: 3000,
    });
  }).catch(err => {
    console.error(failureMessage, err);
    toastFn({
      title: "Error",
      description: failureMessage,
      variant: "destructive",
      duration: 3000,
    });
  });
}

